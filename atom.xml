<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Tyuu'Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://tyuu.me/"/>
  <updated>2015-12-11T06:19:53.393Z</updated>
  <id>http://tyuu.me/</id>
  
  <author>
    <name><![CDATA[Tyuu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JAVA 8 LAMBDA COMPARATOR 例子]]></title>
    <link href="http://tyuu.me/2015/12/11/java-8-lambda-compartor/"/>
    <id>http://tyuu.me/2015/12/11/java-8-lambda-compartor/</id>
    <published>2015-12-11T06:17:28.000Z</published>
    <updated>2015-12-11T06:19:53.393Z</updated>
    <content type="html"><![CDATA[<p>在这个例子中，我们将向您展示如何使用Java 8 Lambda表达式写一个Comparator排序列表。</p>
<h3 id="1-_u9996_u5148_u6765_u770B_u4E00_u4E2A_u4F8B_u5B50_uFF1A"><a href="#1-_u9996_u5148_u6765_u770B_u4E00_u4E2A_u4F8B_u5B50_uFF1A" class="headerlink" title="1.首先来看一个例子："></a>1.首先来看一个例子：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Developer&gt; byName = <span class="keyword">new</span> Comparator&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-_Lambda__u65B9_u5F0F_u5B9E_u73B0"><a href="#2-_Lambda__u65B9_u5F0F_u5B9E_u73B0" class="headerlink" title="2. Lambda 方式实现"></a>2. Lambda 方式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Developer&gt; byName = (Developer o1, Developer o2)-&gt;o1.getName().compareTo(o2.getName());</span><br></pre></td></tr></table></figure>
<ul>
<li><a id="more"></a>
举个例子来比较一下开发者的年龄对。通常情况下，我们使用Collections.sort并实现一个匿名Comparator类：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">public class TestSorting &#123;</span><br><span class="line"> </span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line"> </span><br><span class="line">    List&amp;lt;Developer&amp;gt; listDevs = getDevelopers();</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">"Before Sort"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Developer developer : listDevs) &#123;</span><br><span class="line">      System.out.println(developer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //sort by age</span><br><span class="line">    Collections.sort(listDevs, new Comparator&amp;lt;Developer&amp;gt;() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public int compare(Developer o1, Developer o2) &#123;</span><br><span class="line">        <span class="built_in">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    System.out.println(<span class="string">"After Sort"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Developer developer : listDevs) &#123;</span><br><span class="line">      System.out.println(developer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  private static List&amp;lt;Developer&amp;gt; <span class="function"><span class="title">getDevelopers</span></span>() &#123;</span><br><span class="line"> </span><br><span class="line">    List&amp;lt;Developer&amp;gt; result = new ArrayList&amp;lt;Developer&amp;gt;();</span><br><span class="line"> </span><br><span class="line">    result.add(new Developer(<span class="string">"mkyong"</span>, new BigDecimal(<span class="string">"70000"</span>), <span class="number">33</span>));</span><br><span class="line">    result.add(new Developer(<span class="string">"alvin"</span>, new BigDecimal(<span class="string">"80000"</span>), <span class="number">20</span>));</span><br><span class="line">    result.add(new Developer(<span class="string">"jason"</span>, new BigDecimal(<span class="string">"100000"</span>), <span class="number">10</span>));</span><br><span class="line">    result.add(new Developer(<span class="string">"iris"</span>, new BigDecimal(<span class="string">"170000"</span>), <span class="number">55</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> result;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Before Sort</span><br><span class="line">Developer [name=mkyong, salary=<span class="number">70000</span>, age=<span class="number">33</span>]</span><br><span class="line">Developer [name=alvin, salary=<span class="number">80000</span>, age=<span class="number">20</span>]</span><br><span class="line">Developer [name=jason, salary=<span class="number">100000</span>, age=<span class="number">10</span>]</span><br><span class="line">Developer [name=iris, salary=<span class="number">170000</span>, age=<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line">After Sort</span><br><span class="line">Developer [name=jason, salary=<span class="number">100000</span>, age=<span class="number">10</span>]</span><br><span class="line">Developer [name=alvin, salary=<span class="number">80000</span>, age=<span class="number">20</span>]</span><br><span class="line">Developer [name=mkyong, salary=<span class="number">70000</span>, age=<span class="number">33</span>]</span><br><span class="line">Developer [name=iris, salary=<span class="number">170000</span>, age=<span class="number">55</span>]</span><br></pre></td></tr></table></figure>
<p>当排序规则发生变化时，我们只能通过实现另外一个Comparator类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort by age</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> Comparator&amp;lt;Developer&amp;gt;() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//sort by name	</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> Comparator&amp;lt;Developer&amp;gt;() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">      </span><br><span class="line"><span class="comment">//sort by salary</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> Comparator&amp;lt;Developer&amp;gt;() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.getSalary().compareTo(o2.getSalary());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>没错，它能很好的工作，但是想一想我们为了一行代码的改变而去重新实现一个类！</p>
<h3 id="3-Java_8_3FLambda"><a href="#3-Java_8_3FLambda" class="headerlink" title="3.Java 8?Lambda"></a>3.Java 8?Lambda</h3><p>在Java 8 中 List 接口已经直接支持了sort方法，不在需要Collections.sort了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//List.sort() since Java 8</span></span><br><span class="line">listDevs.sort(<span class="keyword">new</span> Comparator&amp;lt;Developer&amp;gt;() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o2.getAge() - o1.getAge();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Lambda表达式的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSorting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&amp;lt;Developer&amp;gt; listDevs = getDevelopers();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"Before Sort"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Developer developer : listDevs) &#123;</span><br><span class="line">      System.out.println(developer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"After Sort"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//lambda here!</span></span><br><span class="line">    listDevs.sort((Developer o1, Developer o2)-&amp;gt;o1.getAge()-o2.getAge());</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//java 8 only, lambda also, to print the List</span></span><br><span class="line">    listDevs.forEach((developer)-&amp;gt;System.out.println(developer));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> List&amp;lt;Developer&amp;gt; getDevelopers() &#123;</span><br><span class="line"></span><br><span class="line">    List&amp;lt;Developer&amp;gt; result = <span class="keyword">new</span> ArrayList&amp;lt;Developer&amp;gt;();</span><br><span class="line"></span><br><span class="line">    result.add(<span class="keyword">new</span> Developer(<span class="string">"mkyong"</span>, <span class="keyword">new</span> BigDecimal(<span class="string">"70000"</span>), <span class="number">33</span>));</span><br><span class="line">    result.add(<span class="keyword">new</span> Developer(<span class="string">"alvin"</span>, <span class="keyword">new</span> BigDecimal(<span class="string">"80000"</span>), <span class="number">20</span>));</span><br><span class="line">    result.add(<span class="keyword">new</span> Developer(<span class="string">"jason"</span>, <span class="keyword">new</span> BigDecimal(<span class="string">"100000"</span>), <span class="number">10</span>));</span><br><span class="line">    result.add(<span class="keyword">new</span> Developer(<span class="string">"iris"</span>, <span class="keyword">new</span> BigDecimal(<span class="string">"170000"</span>), <span class="number">55</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Before Sort</span><br><span class="line">Developer [name=mkyong, salary=<span class="number">70000</span>, age=<span class="number">33</span>]</span><br><span class="line">Developer [name=alvin, salary=<span class="number">80000</span>, age=<span class="number">20</span>]</span><br><span class="line">Developer [name=jason, salary=<span class="number">100000</span>, age=<span class="number">10</span>]</span><br><span class="line">Developer [name=iris, salary=<span class="number">170000</span>, age=<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line">After Sort</span><br><span class="line">Developer [name=jason, salary=<span class="number">100000</span>, age=<span class="number">10</span>]</span><br><span class="line">Developer [name=alvin, salary=<span class="number">80000</span>, age=<span class="number">20</span>]</span><br><span class="line">Developer [name=mkyong, salary=<span class="number">70000</span>, age=<span class="number">33</span>]</span><br><span class="line">Developer [name=iris, salary=<span class="number">170000</span>, age=<span class="number">55</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="4-_u770B_u770B_u5176_u4ED6_u7684Lambda_u4F8B_u5B50"><a href="#4-_u770B_u770B_u5176_u4ED6_u7684Lambda_u4F8B_u5B50" class="headerlink" title="4.看看其他的Lambda例子"></a>4.看看其他的Lambda例子</h3><h4 id="4-1_u6309_u7167_u5E74_u9F84_u6392_u5E8F"><a href="#4-1_u6309_u7167_u5E74_u9F84_u6392_u5E8F" class="headerlink" title="4.1按照年龄排序"></a>4.1按照年龄排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort by age</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> Comparator&amp;lt;Developer&amp;gt;() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line">listDevs.sort((Developer o1, Developer o2)-&amp;gt;o1.getAge()-o2.getAge());</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda, valid, parameter type is optional</span></span><br><span class="line">listDevs.sort((o1, o2)-&amp;gt;o1.getAge()-o2.getAge());</span><br></pre></td></tr></table></figure>
<h4 id="4-2__u6309_u7167_u540D_u5B57_u6392_u5E8F"><a href="#4-2__u6309_u7167_u540D_u5B57_u6392_u5E8F" class="headerlink" title="4.2 按照名字排序"></a>4.2 按照名字排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort by name</span></span><br><span class="line">  Collections.sort(listDevs, <span class="keyword">new</span> Comparator&amp;lt;Developer&amp;gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//lambda</span></span><br><span class="line">  listDevs.sort((Developer o1, Developer o2)-&amp;gt;o1.getName().compareTo(o2.getName()));		</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//lambda</span></span><br><span class="line">  listDevs.sort((o1, o2)-&amp;gt;o1.getName().compareTo(o2.getName()));</span><br></pre></td></tr></table></figure>
<h4 id="4-3__u6309_u7167_u5DE5_u8D44_u6392_u5E8F"><a href="#4-3__u6309_u7167_u5DE5_u8D44_u6392_u5E8F" class="headerlink" title="4.3 按照工资排序"></a>4.3 按照工资排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort by salary</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> Comparator&amp;lt;Developer&amp;gt;() &#123;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.getSalary().compareTo(o2.getSalary());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);				</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line">listDevs.sort((Developer o1, Developer o2)-&amp;gt;o1.getSalary().compareTo(o2.getSalary()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line">listDevs.sort((o1, o2)-&amp;gt;o1.getSalary().compareTo(o2.getSalary()));</span><br></pre></td></tr></table></figure>
<h4 id="4-4__u53CD_u5411_u6392_u5E8F"><a href="#4-4__u53CD_u5411_u6392_u5E8F" class="headerlink" title="4.4 反向排序"></a>4.4 反向排序</h4><p>Lambda 根据工资降序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&amp;lt;Developer&amp;gt; salaryComparator = (o1, o2)-&amp;gt;o1.getSalary().compareTo(o2.getSalary());</span><br><span class="line">  listDevs.sort(salaryComparator);</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Developer [name=mkyong, salary=<span class="number">70000</span>, age=<span class="number">33</span>]</span><br><span class="line">Developer [name=alvin, salary=<span class="number">80000</span>, age=<span class="number">20</span>]</span><br><span class="line">Developer [name=jason, salary=<span class="number">100000</span>, age=<span class="number">10</span>]</span><br><span class="line">Developer [name=iris, salary=<span class="number">170000</span>, age=<span class="number">55</span>]</span><br></pre></td></tr></table></figure></p>
<p>Lambda 根据工资升序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Comparator&amp;lt;Developer&amp;gt; salaryComparator = (o1, o2)-&amp;gt;o1.getSalary().compareTo(o2.getSalary());</span><br><span class="line">listDevs.sort(salaryComparator.reversed());</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Developer [name=iris, salary=<span class="number">170000</span>, age=<span class="number">55</span>]</span><br><span class="line">Developer [name=jason, salary=<span class="number">100000</span>, age=<span class="number">10</span>]</span><br><span class="line">Developer [name=alvin, salary=<span class="number">80000</span>, age=<span class="number">20</span>]</span><br><span class="line">Developer [name=mkyong, salary=<span class="number">70000</span>, age=<span class="number">33</span>]</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在这个例子中，我们将向您展示如何使用Java 8 Lambda表达式写一个Comparator排序列表。</p>
<h3 id="1-_u9996_u5148_u6765_u770B_u4E00_u4E2A_u4F8B_u5B50_uFF1A"><a href="#1-_u9996_u5148_u6765_u770B_u4E00_u4E2A_u4F8B_u5B50_uFF1A" class="headerlink" title="1.首先来看一个例子："></a>1.首先来看一个例子：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Developer&gt; byName = <span class="keyword">new</span> Comparator&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Developer o1, Developer o2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-_Lambda__u65B9_u5F0F_u5B9E_u73B0"><a href="#2-_Lambda__u65B9_u5F0F_u5B9E_u73B0" class="headerlink" title="2. Lambda 方式实现"></a>2. Lambda 方式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Developer&gt; byName = (Developer o1, Developer o2)-&gt;o1.getName().compareTo(o2.getName());</span><br></pre></td></tr></table></figure>
<ul>
<li>]]>
    
    </summary>
    
      <category term="java8" scheme="http://tyuu.me/tags/java8/"/>
    
      <category term="lambda" scheme="http://tyuu.me/tags/lambda/"/>
    
  </entry>
  
</feed>
